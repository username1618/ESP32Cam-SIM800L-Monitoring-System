#version: '3.8'

services:

  # Прокси
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"    # HTTP для /upload и /settings-flat
      - "443:443"  # HTTPS для остального
    networks:
      app-network:
        ipv4_address: 172.21.0.10  # Фиксируем IP для nginx
        aliases:
          - XXX.ru
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    environment:
      - TZ=Europe/Moscow
    depends_on:
      - sim800-api
      - web-ui

  # API для SIM800
  sim800-api:
    image: 'service/sim800'
    container_name: 'sim800-api'
    restart: 'always'
    networks:
      - app-network
    # ports:
      # - "16000:16000"
    volumes:
      - './.env:/srv/app/.env' 
      - './data/:/srv/app/data/'
      - './static/:/srv/app/static/'
      - './camera_settings.json:/srv/app/camera_settings.json'
      - './blocked_ips.txt:/srv/app/blocked_ips.txt'
      - './app_sim800/api.log:/srv/app/api.log'
      
      - './app_sim800/main.py:/srv/app/main.py'
      - './app_sim800/config.py:/srv/app/config.py'
      - './app_sim800/security.py:/srv/app/security.py'
      - './app_sim800/limiter.py:/srv/app/limiter.py'
      - './app_sim800/utilits.py:/srv/app/utilits.py'  
      - './app_sim800/endpoints/settings.py:/srv/app/endpoints/settings.py'  
      - './app_sim800/endpoints/upload.py:/srv/app/endpoints/upload.py'   

    environment:
      - TZ=Europe/Moscow

  # WEB интерфейс
  web-ui:
    image: 'service/web'
    container_name: 'web-ui'
    restart: 'always'
    networks:
      - app-network
    # ports:
      # - "15001:15001"
    volumes:
      - './.env:/srv/app/.env' 
      - './data/:/srv/app/data/'
      - './static/:/srv/app/static/'
      - './templates/:/srv/app/templates/'
      - './camera_settings.json:/srv/app/camera_settings.json'
      - './blocked_ips.txt:/srv/app/blocked_ips.txt'
      - './app_web/web.log:/srv/app/web.log'
      
      - './app_web/main.py:/srv/app/main.py'
      - './app_web/config.py:/srv/app/config.py'
    environment:
      - USE_NGINX=True
      - USE_HTTPS=True 
      - USE_REDIS=True
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - TZ=Europe/Moscow
    depends_on:
      redis:
        condition: service_healthy
        
  # БД для Flask Limiter (web-ui)  
  redis:
    image: 'redis:alpine'
    container_name: 'redis'
    command: 
      - redis-server 
      - --requirepass ${REDIS_PASSWORD}
      - --save ""  # Отключаем сохранение на диск
      - --maxmemory 384mb  # Оставляем запас для системы
      - --maxmemory-policy allkeys-lru
      - --loglevel notice
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.75'  # Оптимально для RPi 4
    tmpfs:  # Храним данные в RAM вместо SD-карты
      - /data
    networks:
      - app-network
    environment:
      - TZ=Europe/Moscow
      - OOMScoreAdjust=-500  # Защита от OOM Killer
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
   
   
networks:
  app-network:  # Создаем изолированную сеть
    name: app-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
    driver_opts:
      com.docker.network.bridge.mtu: "1400"  # MTU для GSM
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.enable_icc: "true"